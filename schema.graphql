type Project @entity {
  "Unique identifier made up of contract address and project id"
  id: ID!

  "ID of the project on the contract"
  projectId: BigInt!

  "Determines if the project should be visible to the public"
  active: Boolean!

  "Address to split primary sales with the artist"
  additionalPayee: Bytes

  "Percentage of artist's share of primary sales that goes to additional payee"
  additionalPayeePercentage: BigInt

  "Address to split Secondary sales with the artist"
  additionalPayeeSecondarySalesAddress: Bytes

  "Percentage of artist's share of secondary sales that goes to additional payee"
  additionalPayeeSecondarySalesPercentage: BigInt

  "Artist that created the project"
  artist: Account!

  "Wallet address of the artist"
  artistAddress: Bytes!

  "Artist name"
  artistName: String

  baseIpfsUri: String
  baseUri: String

  "A project is complete when it has reached its maximum invocations"
  complete: Boolean!

  "Timestamp at which a project was completed"
  completedAt: BigInt

  "Curated, playground, factory. A project with no curation status is considered factory"
  curationStatus: String

  "ERC-20 contract address if the project is purchasable via ERC-20"
  currencyAddress: Bytes

  "Currency symbol for ERC-20"
  currencySymbol: String

  "Artist description of the project"
  description: String

  "Is the project dynamic or a static image"
  dynamic: Boolean!

  "Number of times the project has been invoked - number of tokens of the project"
  invocations: BigInt!

  ipfsHash: String

  "License for the project"
  license: String

  "For V3 and-on, this field is null, and projects lock 4 weeks after `completedAt`. Once the project is locked its script may never be updated again."
  locked: Boolean

  "Maximum number of invocations allowed for the project. Note that minter contracts may additionally limit a project's maxInvocations on a specific minter."
  maxInvocations: BigInt!

  "Project name"
  name: String

  "Purchases paused"
  paused: Boolean!

  pricePerTokenInWei: BigInt!

  "Artist/additional payee royalty percentage"
  royaltyPercentage: BigInt

  "The full script composed of scripts"
  script: String

  "Parts of the project script"
  scripts: [ProjectScript!] @derivedFrom(field: "project")

  "The number of scripts stored on-chain"
  scriptCount: BigInt!

  "The number of external asset dependencies stored on-chain"
  externalAssetDependencyCount: BigInt!

  "Once the project's external asset dependencies are locked they may never be modified again"
  externalAssetDependenciesLocked: Boolean!

  "Extra information about the script and rendering options"
  scriptJSON: String

  "Script type and version (see `scriptJSON` if null)"
  scriptTypeAndVersion: String

  "Aspect ratio of the project (see `scriptJSON` if null)"
  aspectRatio: String

  "Tokens of the project"
  tokens: [Token!] @derivedFrom(field: "project")

  "Does the project actually use the hash string"
  useHashString: Boolean!

  "Does the project use media from ipfs"
  useIpfs: Boolean

  "Artist or project website"
  website: String

  "Proposed Artist addresses and payment split percentages"
  proposedArtistAddressesAndSplits: ProposedArtistAddressesAndSplit

  "Accounts that own tokens of the project"
  owners: [AccountProject!] @derivedFrom(field: "project")

  "Receipts for this project, only on minters with settlement"
  receipts: [Receipt!] @derivedFrom(field: "project")

  createdAt: BigInt!
  updatedAt: BigInt!
  activatedAt: BigInt
  scriptUpdatedAt: BigInt
  contract: Contract!

  "Minter configuration for this project (not implemented prior to minter filters)"
  minterConfiguration: ProjectMinterConfiguration

  "Lookup table to get the Sale history of the project"
  saleLookupTables: [SaleLookupTable!]! @derivedFrom(field: "project")

  externalAssetDependencies: [ProjectExternalAssetDependency!]!
    @derivedFrom(field: "project")
}

type ProjectScript @entity {
  id: ID!
  index: BigInt!
  project: Project!
  script: String!
}

type ProposedArtistAddressesAndSplit @entity {
  "Unique identifier made up of contract address and project id"
  id: ID!

  "Proposed artist address"
  artistAddress: Bytes!

  "Proposed artist additional payee address for primary sales"
  additionalPayeePrimarySalesAddress: Bytes!

  "Proposed artist additional payee percentage for primary sales"
  additionalPayeePrimarySalesPercentage: BigInt!

  "Proposed artist additional payee address for secondary sales"
  additionalPayeeSecondarySalesAddress: Bytes!

  "Proposed artist additional payee percentage for secondary sales"
  additionalPayeeSecondarySalesPercentage: BigInt!

  "Project associated with this proposed artist addresses and splits"
  project: Project!

  createdAt: BigInt!
}

type EngineRegistry @entity {
  "Unique identifier made up of the Engine Registry's contract address"
  id: ID!

  "Core contracts that are registered on this Engine Registry, when this is most recent Engine Registry to add the contract"
  registeredContracts: [Contract!] @derivedFrom(field: "registeredOn")
}

enum CoreType {
  "First Art Blocks flagship core"
  GenArt721CoreV0
  "Second Art Blocks flagship core"
  GenArt721CoreV1
  "Art Blocks Engine & Partner cores"
  GenArt721CoreV2
  "Third Art Blocks flagship core"
  GenArt721CoreV3
  "V3 Derivative - Art Blocks Engine core"
  GenArt721CoreV3_Engine
  "V3 Derivative - Art Blocks Engine Flex core"
  GenArt721CoreV3_Engine_Flex
}

type Contract @entity {
  "Unique identifier made up of the contract address"
  id: ID!

  admin: Bytes!

  "Core contract type"
  type: CoreType!

  "Address that receives primary sales platform fees"
  renderProviderAddress: Bytes!

  "Percentage of primary sales allocated to the platform"
  renderProviderPercentage: BigInt!

  "Address that receives secondary sales platform royalties (null for pre-V3 contracts, check Royalty Registry)"
  renderProviderSecondarySalesAddress: Bytes

  "Basis points of secondary sales allocated to the platform (null for pre-V3 contracts, check Royalty Registry)"
  renderProviderSecondarySalesBPS: BigInt

  "Address that receives primary sales platform fees, only for V3_Engine contracts"
  enginePlatformProviderAddress: Bytes

  "Percentage of primary sales allocated to the platform, only for V3_Engine contracts"
  enginePlatformProviderPercentage: BigInt

  "Address that receives secondary sales platform royalties, only for V3_Engine contracts"
  enginePlatformProviderSecondarySalesAddress: Bytes

  "Basis points of secondary sales allocated to the platform, only for V3_Engine contracts"
  enginePlatformProviderSecondarySalesBPS: BigInt

  "List of contracts that are allowed to mint"
  mintWhitelisted: [Bytes!]!

  "Randomizer contract used to generate token hashes"
  randomizerContract: Bytes

  "Curation registry contract address"
  curationRegistry: Bytes

  "Dependency registry contract address"
  dependencyRegistry: DependencyRegistry

  nextProjectId: BigInt!

  "List of projects on the contract"
  projects: [Project!] @derivedFrom(field: "contract")

  "List of tokens on the contract"
  tokens: [Token!] @derivedFrom(field: "contract")

  "Accounts whitelisted on the contract"
  whitelisted: [Whitelisting!] @derivedFrom(field: "contract")

  createdAt: BigInt!

  updatedAt: BigInt!

  "Associated minter filter (if being indexed) - not always indexed for Engine contracts"
  minterFilter: MinterFilter

  preferredIPFSGateway: String

  preferredArweaveGateway: String

  "New projects forbidden (can only be true on V3+ contracts)"
  newProjectsForbidden: Boolean!

  "Automatically approve all artist split proposals (used on V3 Engine contracts)"
  autoApproveArtistSplitProposals: Boolean

  "Latest engine registry that this contract is registered with, if any (used for indexing purposes)"
  registeredOn: EngineRegistry
}

type Whitelisting @entity {
  id: ID!
  account: Account!
  contract: Contract!
}

type Account @entity {
  id: ID!
  tokens: [Token!] @derivedFrom(field: "owner")

  "Projects the account owns tokens from"
  projectsOwned: [AccountProject!] @derivedFrom(field: "account")

  "Projects the account is listed as artist for"
  projectsCreated: [Project!] @derivedFrom(field: "artist")

  "Receipts for the account, on minters with settlement"
  receipts: [Receipt!] @derivedFrom(field: "account")

  "Contracts the account is whitelisted on"
  whitelistedOn: [Whitelisting!] @derivedFrom(field: "account")
}

type AccountProject @entity {
  id: ID!
  account: Account!
  project: Project!
  count: Int!
}

type Token @entity {
  "Unique identifier made up of contract address and token id"
  id: ID!

  "ID of the token on the contract"
  tokenId: BigInt!

  "Contract the token is on"
  contract: Contract!

  "Invocation number of the project"
  invocation: BigInt!

  "Unique string used as input to the tokens project script"
  hash: Bytes!

  "Current owner of the token"
  owner: Account!

  "Project of the token"
  project: Project!

  uri: String
  createdAt: BigInt!
  updatedAt: BigInt!

  "Transaction hash of token mint"
  transactionHash: Bytes!

  transfers: [Transfer!] @derivedFrom(field: "token")

  "Lookup table to get the Sale history"
  saleLookupTables: [SaleLookupTable!]! @derivedFrom(field: "token")

  "Next available sale id"
  nextSaleId: BigInt!
}

type MinterFilter @entity {
  "Unique identifier made up of minter filter contract address"
  id: ID!

  "Associated core contract"
  coreContract: Contract!

  "Minters allowlisted on MinterFilter"
  minterAllowlist: [Minter!]!

  "Minters associated with MinterFilter"
  associatedMinters: [Minter!]! @derivedFrom(field: "minterFilter")

  updatedAt: BigInt!
}

type Minter @entity {
  "Unique identifier made up of minter contract address"
  id: ID!

  "Minter type - String if minter returns it's type, empty string otherwise"
  type: String!

  "Associated Minter Filter"
  minterFilter: MinterFilter!

  "Configuration details used by specific minters (json string)"
  extraMinterDetails: String!

  coreContract: Contract!

  "Receipts for this minter, only for minters with settlement"
  receipts: [Receipt!] @derivedFrom(field: "minter")

  updatedAt: BigInt!

  "Deprecated (now in extraMinterDetails). Minimum allowed auction length in seconds (linear Dutch auction minters)"
  minimumAuctionLengthInSeconds: BigInt

  "Deprecated (now in extraMinterDetails). Minimum allowed half life in seconds (exponential Dutch auction minters)"
  minimumHalfLifeInSeconds: BigInt

  "Deprecated (now in extraMinterDetails). Maximum allowed half life in seconds (exponential Dutch auction minters)"
  maximumHalfLifeInSeconds: BigInt
}

type ProjectMinterConfiguration @entity {
  "Unique identifier made up of minter contract address-projectId"
  id: ID!

  "The associated project"
  project: Project!

  "The associated minter"
  minter: Minter!

  "true if project's token price has been configured on minter"
  priceIsConfigured: Boolean!

  "currency symbol as defined on minter - ETH reserved for ether"
  currencySymbol: String!

  "currency address as defined on minter - address(0) reserved for ether"
  currencyAddress: Bytes!

  "Defines if purchasing token to another is allowed"
  purchaseToDisabled: Boolean!

  "price, or resting price of Duch auction, or minimum bid price in English auction, in wei"
  basePrice: BigInt

  "Configuration details used by specific minter project configurations (json string)"
  extraMinterDetails: String!

  "Maximum number of invocations allowed for the project (on the minter). If less than than a project's maximum invocations defined on a core contract, the minter contract will limit this project's maximum invocations"
  maxInvocations: BigInt

  "Deprecated (now in extraMinterDetails). Dutch auction start price, in wei"
  startPrice: BigInt

  "Deprecated (now in extraMinterDetails). Half life for exponential decay Dutch auction, in seconds"
  halfLifeSeconds: BigInt

  "Deprecated (now in extraMinterDetails). Dutch auction start time (unix timestamp)"
  startTime: BigInt

  "Deprecated (now in extraMinterDetails). Linear Dutch auction end time (unix timestamp)"
  endTime: BigInt
}

type Receipt @entity {
  "Unique identifier made up of minter contract address-projectId-accountAddress"
  id: ID!

  "The associated project"
  project: Project!

  "The associated minter"
  minter: Minter!

  "The associated account"
  account: Account!

  "The total net amount posted (sent to settlement contract) for tokens"
  netPosted: BigInt!

  "The total quantity of tokens purchased on the project"
  numPurchased: BigInt!

  updatedAt: BigInt!
}

enum SaleType {
  Single
  Bundle
}

enum PaymentType {
  Native
  ERC20
  ERC721
  ERC1155
}

enum Exchange {
  "Opensea V1"
  OS_V1
  "Opensea V2"
  OS_V2
  "LooksRare"
  LR_V1
  "Opensea Seaport"
  OS_SP
}

type Payment @entity {
  "Payment id formatted: '{SaleId}-{paymentNumber}' (paymentNumber will be 0 for non-Seaport trades)"
  id: ID!

  "Type of token transferred in this payment"
  paymentType: PaymentType!

  "The address of the token used for the payment"
  paymentToken: Bytes!

  "The price of the sale"
  price: BigInt!

  "The associated sale"
  sale: Sale!

  "The recipient address"
  recipient: Bytes!
}

type Sale @entity {
  "The sale id formated: tokenId - token.nextSaleId (using first token sold for bundles) for Opensea V1/V2, orderHash from sale event for Looksrare and Seaport"
  id: ID!

  "The hash of the transaction"
  txHash: Bytes!

  "The exchange used for this sale"
  exchange: Exchange!

  "The sale type (Single | Bundle)"
  saleType: SaleType!

  "The block number of the sale"
  blockNumber: BigInt!

  "The timestamp of the sale"
  blockTimestamp: BigInt!

  "A raw formated string of the token(s) sold (i.e TokenID1::TokenID2::TokenID3)"
  summaryTokensSold: String!

  "Lookup table to get the list of Tokens sold in this sale"
  saleLookupTables: [SaleLookupTable!]! @derivedFrom(field: "sale")

  "The seller address"
  seller: Bytes!

  "The buyer address"
  buyer: Bytes!

  "List of Payment tokens involved in this sale"
  payments: [Payment!]! @derivedFrom(field: "sale")

  "Private sales are flagged by this boolean"
  isPrivate: Boolean!
}

type SaleLookupTable @entity {
  "Set to `Project Id::Token Id::Sale Id"
  id: ID!

  "The block number of the sale"
  blockNumber: BigInt!

  "Timestamp of the sale"
  timestamp: BigInt!

  "The associated project"
  project: Project!

  "The token sold"
  token: Token!

  "The associated sale"
  sale: Sale!
}

type Transfer @entity(immutable: true) {
  id: ID!

  token: Token!

  to: Bytes!

  from: Bytes!

  transactionHash: Bytes!

  blockHash: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type Dependency @entity {
  "Unique identifier made up of dependency name and version separated by an @ symbol (e.g. p5js@1.0.0)"
  id: ID!
  "Preffered CDN for this dependency"
  preferredCDN: String!
  "Additional CDNs for this dependency"
  additionalCDNs: [DependencyAdditionalCDN!]! @derivedFrom(field: "dependency")
  "Number of additional CDNs for this dependency"
  additionalCDNCount: BigInt!
  "Preffered repository for this dependency"
  preferredRepository: String!
  "Additional repositories for this dependency"
  additionalRepositoryCount: BigInt!
  "Number of additional repositories for this dependency"
  additionalRepositories: [DependencyAdditionalRepository!]!
    @derivedFrom(field: "dependency")
  "List of on-chain scripts that for this dependency"
  scripts: [DependencyScript!]! @derivedFrom(field: "dependency")
  "Number of on-chain scripts for this dependency"
  scriptCount: BigInt!
  "Concatenated string of all scripts for this dependency"
  script: String
  "Reference website for this dependency (e.g. https://p5js.org)"
  referenceWebsite: String!
  "Depenency registry contract that this dependency is registered on"
  dependencyRegistry: DependencyRegistry!
  "Timestamp of last update"
  updatedAt: BigInt!
}

type DependencyRegistry @entity {
  "Unique identifier made up of dependency registry contract address"
  id: Bytes!
  "Core contracts that this registry can provide dependeny overrides for"
  supportedCoreContracts: [Contract!]! @derivedFrom(field: "dependencyRegistry")
  "List of dependencies that are registered on this registry contract"
  dependencies: [Dependency!] @derivedFrom(field: "dependencyRegistry")
  "Current owner of this contract"
  owner: Bytes!
  "Timestamp of last update"
  updatedAt: BigInt!
}

type DependencyAdditionalCDN @entity {
  "Unique identifier made up of dependency id and index"
  id: ID!
  "Dependency this additional CDN belongs to"
  dependency: Dependency!
  "URL of the CDN"
  cdn: String!
  "Index of this additional CDN"
  index: BigInt!
}

type DependencyAdditionalRepository @entity {
  "Unique identifier made up of dependency id and index"
  id: ID!
  "Dependency this additional repository belongs to"
  dependency: Dependency!
  "URL of the repository"
  repository: String!
  "Index of this additional repository"
  index: BigInt!
}

type DependencyScript @entity {
  "Unique identifier made up of dependency id and index"
  id: ID!
  "Dependency this script belongs to"
  dependency: Dependency!
  "Index of this script"
  index: BigInt!
  "Contents of script"
  script: String!
  "Address of the bytecode storage contract for this script"
  address: Bytes!
}

enum ProjectExternalAssetDependencyType {
  "Asset hosted on IPFS"
  IPFS
  "Asset hosted on Arweave"
  ARWEAVE
  "Asset hosted on chain"
  ONCHAIN
}

type ProjectExternalAssetDependency @entity {
  "Unique identifier made up of projectId-index"
  id: ID!

  "The associated project"
  project: Project!

  "The dependency type"
  dependencyType: ProjectExternalAssetDependencyType!

  "The dependency cid. This will be an empty string assets of type ONCHAIN."
  cid: String!

  "The dependency index"
  index: BigInt!

  "Address of the bytecode storage contract for this asset if it is of type ONCHAIN"
  bytecodeAddress: Bytes

  "The asset data if it is onchain"
  data: String
}
