version: "3.8"
services:
  hardhat:
    build: hardhat
    volumes:
      - shared-data:/usr/hardhat/shared
  seed:
    build: seed
    volumes:
      - shared-data:/usr/seed/shared
      - ./setup-scripts:/usr/seed/setup-scripts
    depends_on:
      - hardhat
  graph-node:
    image: graphprotocol/graph-node
    depends_on:
      - ipfs
      - postgres
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      postgres_host: postgres
      postgres_user: graph-node
      postgres_pass: let-me-in
      postgres_db: graph-node
      ipfs: 'ipfs:5001'
      ethereum: 'mainnet:http://hardhat:8545'
      fork_base: 'https://api.thegraph.com/subgraphs/id/'
      GRAPH_LOG: info
  ipfs:
    image: ipfs/go-ipfs:v0.10.0
    volumes:
      - ipfs:/data/ipfs
  postgres:
    image: postgres
    command:
      [
        "postgres",
        "-cshared_preload_libraries=pg_stat_statements"
      ]
    environment:
      POSTGRES_USER: graph-node
      POSTGRES_PASSWORD: let-me-in
      POSTGRES_DB: graph-node
      # FIXME: remove this env. var. which we shouldn't need. Introduced by
      # <https://github.com/graphprotocol/graph-node/pull/3511>, maybe as a
      # workaround for https://github.com/docker/for-mac/issues/6270?
      PGDATA: "/var/lib/postgresql/data"
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    volumes: 
      - postgres:/var/lib/postgresql/data
  subgraph:
    build:
      context: ../../
      dockerfile: ./docker/Dockerfile
    depends_on:
      - graph-node
    environment:
      GRAPH_NODE: 'http://graph-node:8020'
      IPFS: 'http://ipfs:5001'
    volumes:
      - shared-data:/usr/subgraph/shared
      - ./setup-scripts:/usr/subgraph/setup-scripts
    command: ./setup-scripts/wait-for-it.sh -h graph-node -p 8020 --timeout=0 -- ./setup-scripts/setup-subgraph.sh
    # We create an empty file called `subgraph-complete` in the shared
    # volume when the subgraph is deployed. We use this file as a
    # healthcheck to ensure that the subgraph is deployed before
    # running the e2e tests.
    healthcheck:
      test: ["CMD-SHELL", "cat ./shared/subgraph-complete"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 120s
  runner:
    build: runner
    environment:
      - SUBGRAPH_GRAPHQL_URL=http://graph-node:8000/subgraphs/name/artblocks/art-blocks
    depends_on:
      subgraph:
        condition: service_healthy
    volumes:
      - shared-data:/usr/runner/shared
      - ./runner/__tests__:/usr/runner/__tests__
volumes:
# By setting all of the volumes to be tmpfs, we can avoid the need to
# clean up the volumes after each run. In this way our e2e test suite
# can be run in a CI environment without needing to worry about the
# state of the volumes between runs.
  shared-data:
    driver_opts:
      type: tmpfs
      device: tmpfs
  postgres:
    driver_opts:
      type: tmpfs
      device: tmpfs
  ipfs:
    driver_opts:
      type: tmpfs
      device: tmpfs