// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AcceptedArtistAddressesAndSplits extends ethereum.Event {
  get params(): AcceptedArtistAddressesAndSplits__Params {
    return new AcceptedArtistAddressesAndSplits__Params(this);
  }
}

export class AcceptedArtistAddressesAndSplits__Params {
  _event: AcceptedArtistAddressesAndSplits;

  constructor(event: AcceptedArtistAddressesAndSplits) {
    this._event = event;
  }

  get _projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get _to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MinterUpdated extends ethereum.Event {
  get params(): MinterUpdated__Params {
    return new MinterUpdated__Params(this);
  }
}

export class MinterUpdated__Params {
  _event: MinterUpdated;

  constructor(event: MinterUpdated) {
    this._event = event;
  }

  get _currentMinter(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PlatformUpdated extends ethereum.Event {
  get params(): PlatformUpdated__Params {
    return new PlatformUpdated__Params(this);
  }
}

export class PlatformUpdated__Params {
  _event: PlatformUpdated;

  constructor(event: PlatformUpdated) {
    this._event = event;
  }

  get _field(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ProjectUpdated extends ethereum.Event {
  get params(): ProjectUpdated__Params {
    return new ProjectUpdated__Params(this);
  }
}

export class ProjectUpdated__Params {
  _event: ProjectUpdated;

  constructor(event: ProjectUpdated) {
    this._event = event;
  }

  get _projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _update(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class ProposedArtistAddressesAndSplits extends ethereum.Event {
  get params(): ProposedArtistAddressesAndSplits__Params {
    return new ProposedArtistAddressesAndSplits__Params(this);
  }
}

export class ProposedArtistAddressesAndSplits__Params {
  _event: ProposedArtistAddressesAndSplits;

  constructor(event: ProposedArtistAddressesAndSplits) {
    this._event = event;
  }

  get _projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _artistAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _additionalPayeePrimarySales(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _additionalPayeePrimarySalesPercentage(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _additionalPayeeSecondarySales(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get _additionalPayeeSecondarySalesPercentage(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class IGenArt721CoreContractV3_Engine__getPrimaryRevenueSplitsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: Address;
  value6: BigInt;
  value7: Address;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: Address,
    value6: BigInt,
    value7: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    return map;
  }

  getRenderProviderRevenue_(): BigInt {
    return this.value0;
  }

  getRenderProviderAddress_(): Address {
    return this.value1;
  }

  getPlatformProviderRevenue_(): BigInt {
    return this.value2;
  }

  getPlatformProviderAddress_(): Address {
    return this.value3;
  }

  getArtistRevenue_(): BigInt {
    return this.value4;
  }

  getArtistAddress_(): Address {
    return this.value5;
  }

  getAdditionalPayeePrimaryRevenue_(): BigInt {
    return this.value6;
  }

  getAdditionalPayeePrimaryAddress_(): Address {
    return this.value7;
  }
}

export class IGenArt721CoreContractV3_Engine__getRoyaltiesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class IGenArt721CoreContractV3_Engine__projectStateDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: boolean;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: boolean,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getInvocations(): BigInt {
    return this.value0;
  }

  getMaxInvocations(): BigInt {
    return this.value1;
  }

  getActive(): boolean {
    return this.value2;
  }

  getPaused(): boolean {
    return this.value3;
  }

  getCompletedTimestamp(): BigInt {
    return this.value4;
  }

  getLocked(): boolean {
    return this.value5;
  }
}

export class IGenArt721CoreContractV3_Engine extends ethereum.SmartContract {
  static bind(address: Address): IGenArt721CoreContractV3_Engine {
    return new IGenArt721CoreContractV3_Engine(
      "IGenArt721CoreContractV3_Engine",
      address
    );
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  adminACLAllowed(
    _sender: Address,
    _contract: Address,
    _selector: Bytes
  ): boolean {
    let result = super.call(
      "adminACLAllowed",
      "adminACLAllowed(address,address,bytes4):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromFixedBytes(_selector)
      ]
    );

    return result[0].toBoolean();
  }

  try_adminACLAllowed(
    _sender: Address,
    _contract: Address,
    _selector: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "adminACLAllowed",
      "adminACLAllowed(address,address,bytes4):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromFixedBytes(_selector)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  adminACLContract(): Address {
    let result = super.call(
      "adminACLContract",
      "adminACLContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_adminACLContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "adminACLContract",
      "adminACLContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  coreType(): string {
    let result = super.call("coreType", "coreType():(string)", []);

    return result[0].toString();
  }

  try_coreType(): ethereum.CallResult<string> {
    let result = super.tryCall("coreType", "coreType():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  coreVersion(): string {
    let result = super.call("coreVersion", "coreVersion():(string)", []);

    return result[0].toString();
  }

  try_coreVersion(): ethereum.CallResult<string> {
    let result = super.tryCall("coreVersion", "coreVersion():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getPrimaryRevenueSplits(
    _projectId: BigInt,
    _price: BigInt
  ): IGenArt721CoreContractV3_Engine__getPrimaryRevenueSplitsResult {
    let result = super.call(
      "getPrimaryRevenueSplits",
      "getPrimaryRevenueSplits(uint256,uint256):(uint256,address,uint256,address,uint256,address,uint256,address)",
      [
        ethereum.Value.fromUnsignedBigInt(_projectId),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );

    return new IGenArt721CoreContractV3_Engine__getPrimaryRevenueSplitsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toAddress()
    );
  }

  try_getPrimaryRevenueSplits(
    _projectId: BigInt,
    _price: BigInt
  ): ethereum.CallResult<
    IGenArt721CoreContractV3_Engine__getPrimaryRevenueSplitsResult
  > {
    let result = super.tryCall(
      "getPrimaryRevenueSplits",
      "getPrimaryRevenueSplits(uint256,uint256):(uint256,address,uint256,address,uint256,address,uint256,address)",
      [
        ethereum.Value.fromUnsignedBigInt(_projectId),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IGenArt721CoreContractV3_Engine__getPrimaryRevenueSplitsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toAddress()
      )
    );
  }

  getRoyalties(
    tokenId: BigInt
  ): IGenArt721CoreContractV3_Engine__getRoyaltiesResult {
    let result = super.call(
      "getRoyalties",
      "getRoyalties(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new IGenArt721CoreContractV3_Engine__getRoyaltiesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getRoyalties(
    tokenId: BigInt
  ): ethereum.CallResult<IGenArt721CoreContractV3_Engine__getRoyaltiesResult> {
    let result = super.tryCall(
      "getRoyalties",
      "getRoyalties(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IGenArt721CoreContractV3_Engine__getRoyaltiesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  isMintWhitelisted(minter: Address): boolean {
    let result = super.call(
      "isMintWhitelisted",
      "isMintWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(minter)]
    );

    return result[0].toBoolean();
  }

  try_isMintWhitelisted(minter: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMintWhitelisted",
      "isMintWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(minter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint_Ecf(_to: Address, _projectId: BigInt, _by: Address): BigInt {
    let result = super.call(
      "mint_Ecf",
      "mint_Ecf(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_projectId),
        ethereum.Value.fromAddress(_by)
      ]
    );

    return result[0].toBigInt();
  }

  try_mint_Ecf(
    _to: Address,
    _projectId: BigInt,
    _by: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mint_Ecf",
      "mint_Ecf(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_projectId),
        ethereum.Value.fromAddress(_by)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextProjectId(): BigInt {
    let result = super.call("nextProjectId", "nextProjectId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextProjectId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextProjectId",
      "nextProjectId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformProviderPrimarySalesAddress(): Address {
    let result = super.call(
      "platformProviderPrimarySalesAddress",
      "platformProviderPrimarySalesAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_platformProviderPrimarySalesAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "platformProviderPrimarySalesAddress",
      "platformProviderPrimarySalesAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformProviderPrimarySalesPercentage(): BigInt {
    let result = super.call(
      "platformProviderPrimarySalesPercentage",
      "platformProviderPrimarySalesPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_platformProviderPrimarySalesPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformProviderPrimarySalesPercentage",
      "platformProviderPrimarySalesPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  platformProviderSecondarySalesAddress(): Address {
    let result = super.call(
      "platformProviderSecondarySalesAddress",
      "platformProviderSecondarySalesAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_platformProviderSecondarySalesAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "platformProviderSecondarySalesAddress",
      "platformProviderSecondarySalesAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformProviderSecondarySalesBPS(): BigInt {
    let result = super.call(
      "platformProviderSecondarySalesBPS",
      "platformProviderSecondarySalesBPS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_platformProviderSecondarySalesBPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformProviderSecondarySalesBPS",
      "platformProviderSecondarySalesBPS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  projectIdToAdditionalPayeePrimarySales(_projectId: BigInt): Address {
    let result = super.call(
      "projectIdToAdditionalPayeePrimarySales",
      "projectIdToAdditionalPayeePrimarySales(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_projectId)]
    );

    return result[0].toAddress();
  }

  try_projectIdToAdditionalPayeePrimarySales(
    _projectId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "projectIdToAdditionalPayeePrimarySales",
      "projectIdToAdditionalPayeePrimarySales(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_projectId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  projectIdToAdditionalPayeePrimarySalesPercentage(_projectId: BigInt): BigInt {
    let result = super.call(
      "projectIdToAdditionalPayeePrimarySalesPercentage",
      "projectIdToAdditionalPayeePrimarySalesPercentage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_projectId)]
    );

    return result[0].toBigInt();
  }

  try_projectIdToAdditionalPayeePrimarySalesPercentage(
    _projectId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "projectIdToAdditionalPayeePrimarySalesPercentage",
      "projectIdToAdditionalPayeePrimarySalesPercentage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_projectId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  projectIdToArtistAddress(_projectId: BigInt): Address {
    let result = super.call(
      "projectIdToArtistAddress",
      "projectIdToArtistAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_projectId)]
    );

    return result[0].toAddress();
  }

  try_projectIdToArtistAddress(
    _projectId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "projectIdToArtistAddress",
      "projectIdToArtistAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_projectId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  projectStateData(
    _projectId: BigInt
  ): IGenArt721CoreContractV3_Engine__projectStateDataResult {
    let result = super.call(
      "projectStateData",
      "projectStateData(uint256):(uint256,uint256,bool,bool,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_projectId)]
    );

    return new IGenArt721CoreContractV3_Engine__projectStateDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_projectStateData(
    _projectId: BigInt
  ): ethereum.CallResult<
    IGenArt721CoreContractV3_Engine__projectStateDataResult
  > {
    let result = super.tryCall(
      "projectStateData",
      "projectStateData(uint256):(uint256,uint256,bool,bool,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_projectId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IGenArt721CoreContractV3_Engine__projectStateDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  renderProviderPrimarySalesAddress(): Address {
    let result = super.call(
      "renderProviderPrimarySalesAddress",
      "renderProviderPrimarySalesAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_renderProviderPrimarySalesAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "renderProviderPrimarySalesAddress",
      "renderProviderPrimarySalesAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  renderProviderPrimarySalesPercentage(): BigInt {
    let result = super.call(
      "renderProviderPrimarySalesPercentage",
      "renderProviderPrimarySalesPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_renderProviderPrimarySalesPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "renderProviderPrimarySalesPercentage",
      "renderProviderPrimarySalesPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  renderProviderSecondarySalesAddress(): Address {
    let result = super.call(
      "renderProviderSecondarySalesAddress",
      "renderProviderSecondarySalesAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_renderProviderSecondarySalesAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "renderProviderSecondarySalesAddress",
      "renderProviderSecondarySalesAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  renderProviderSecondarySalesBPS(): BigInt {
    let result = super.call(
      "renderProviderSecondarySalesBPS",
      "renderProviderSecondarySalesBPS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_renderProviderSecondarySalesBPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "renderProviderSecondarySalesBPS",
      "renderProviderSecondarySalesBPS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenIdToHash(_tokenId: BigInt): Bytes {
    let result = super.call(
      "tokenIdToHash",
      "tokenIdToHash(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBytes();
  }

  try_tokenIdToHash(_tokenId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "tokenIdToHash",
      "tokenIdToHash(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tokenIdToHashSeed(_tokenId: BigInt): Bytes {
    let result = super.call(
      "tokenIdToHashSeed",
      "tokenIdToHashSeed(uint256):(bytes12)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBytes();
  }

  try_tokenIdToHashSeed(_tokenId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "tokenIdToHashSeed",
      "tokenIdToHashSeed(uint256):(bytes12)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tokenIdToProjectId(tokenId: BigInt): BigInt {
    let result = super.call(
      "tokenIdToProjectId",
      "tokenIdToProjectId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_tokenIdToProjectId(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenIdToProjectId",
      "tokenIdToProjectId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AdminACLAllowedCall extends ethereum.Call {
  get inputs(): AdminACLAllowedCall__Inputs {
    return new AdminACLAllowedCall__Inputs(this);
  }

  get outputs(): AdminACLAllowedCall__Outputs {
    return new AdminACLAllowedCall__Outputs(this);
  }
}

export class AdminACLAllowedCall__Inputs {
  _call: AdminACLAllowedCall;

  constructor(call: AdminACLAllowedCall) {
    this._call = call;
  }

  get _sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _contract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _selector(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AdminACLAllowedCall__Outputs {
  _call: AdminACLAllowedCall;

  constructor(call: AdminACLAllowedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AdminACLContractCall extends ethereum.Call {
  get inputs(): AdminACLContractCall__Inputs {
    return new AdminACLContractCall__Inputs(this);
  }

  get outputs(): AdminACLContractCall__Outputs {
    return new AdminACLContractCall__Outputs(this);
  }
}

export class AdminACLContractCall__Inputs {
  _call: AdminACLContractCall;

  constructor(call: AdminACLContractCall) {
    this._call = call;
  }
}

export class AdminACLContractCall__Outputs {
  _call: AdminACLContractCall;

  constructor(call: AdminACLContractCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class Mint_EcfCall extends ethereum.Call {
  get inputs(): Mint_EcfCall__Inputs {
    return new Mint_EcfCall__Inputs(this);
  }

  get outputs(): Mint_EcfCall__Outputs {
    return new Mint_EcfCall__Outputs(this);
  }
}

export class Mint_EcfCall__Inputs {
  _call: Mint_EcfCall;

  constructor(call: Mint_EcfCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _projectId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _by(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class Mint_EcfCall__Outputs {
  _call: Mint_EcfCall;

  constructor(call: Mint_EcfCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetTokenHash_8PTCall extends ethereum.Call {
  get inputs(): SetTokenHash_8PTCall__Inputs {
    return new SetTokenHash_8PTCall__Inputs(this);
  }

  get outputs(): SetTokenHash_8PTCall__Outputs {
    return new SetTokenHash_8PTCall__Outputs(this);
  }
}

export class SetTokenHash_8PTCall__Inputs {
  _call: SetTokenHash_8PTCall;

  constructor(call: SetTokenHash_8PTCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _hash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetTokenHash_8PTCall__Outputs {
  _call: SetTokenHash_8PTCall;

  constructor(call: SetTokenHash_8PTCall) {
    this._call = call;
  }
}
