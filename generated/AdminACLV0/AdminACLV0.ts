// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SuperAdminTransferred extends ethereum.Event {
  get params(): SuperAdminTransferred__Params {
    return new SuperAdminTransferred__Params(this);
  }
}

export class SuperAdminTransferred__Params {
  _event: SuperAdminTransferred;

  constructor(event: SuperAdminTransferred) {
    this._event = event;
  }

  get previousSuperAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newSuperAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get genArt721CoreAddressesToUpdate(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }
}

export class AdminACLV0 extends ethereum.SmartContract {
  static bind(address: Address): AdminACLV0 {
    return new AdminACLV0("AdminACLV0", address);
  }

  AdminACLType(): string {
    let result = super.call("AdminACLType", "AdminACLType():(string)", []);

    return result[0].toString();
  }

  try_AdminACLType(): ethereum.CallResult<string> {
    let result = super.tryCall("AdminACLType", "AdminACLType():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  allowed(_sender: Address, param1: Address, param2: Bytes): boolean {
    let result = super.call(
      "allowed",
      "allowed(address,address,bytes4):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_allowed(
    _sender: Address,
    param1: Address,
    param2: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowed",
      "allowed(address,address,bytes4):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  superAdmin(): Address {
    let result = super.call("superAdmin", "superAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_superAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("superAdmin", "superAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeSuperAdminCall extends ethereum.Call {
  get inputs(): ChangeSuperAdminCall__Inputs {
    return new ChangeSuperAdminCall__Inputs(this);
  }

  get outputs(): ChangeSuperAdminCall__Outputs {
    return new ChangeSuperAdminCall__Outputs(this);
  }
}

export class ChangeSuperAdminCall__Inputs {
  _call: ChangeSuperAdminCall;

  constructor(call: ChangeSuperAdminCall) {
    this._call = call;
  }

  get _newSuperAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _genArt721CoreAddressesToUpdate(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class ChangeSuperAdminCall__Outputs {
  _call: ChangeSuperAdminCall;

  constructor(call: ChangeSuperAdminCall) {
    this._call = call;
  }
}

export class RenounceOwnershipOnCall extends ethereum.Call {
  get inputs(): RenounceOwnershipOnCall__Inputs {
    return new RenounceOwnershipOnCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipOnCall__Outputs {
    return new RenounceOwnershipOnCall__Outputs(this);
  }
}

export class RenounceOwnershipOnCall__Inputs {
  _call: RenounceOwnershipOnCall;

  constructor(call: RenounceOwnershipOnCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipOnCall__Outputs {
  _call: RenounceOwnershipOnCall;

  constructor(call: RenounceOwnershipOnCall) {
    this._call = call;
  }
}

export class TransferOwnershipOnCall extends ethereum.Call {
  get inputs(): TransferOwnershipOnCall__Inputs {
    return new TransferOwnershipOnCall__Inputs(this);
  }

  get outputs(): TransferOwnershipOnCall__Outputs {
    return new TransferOwnershipOnCall__Outputs(this);
  }
}

export class TransferOwnershipOnCall__Inputs {
  _call: TransferOwnershipOnCall;

  constructor(call: TransferOwnershipOnCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newAdminACL(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferOwnershipOnCall__Outputs {
  _call: TransferOwnershipOnCall;

  constructor(call: TransferOwnershipOnCall) {
    this._call = call;
  }
}
