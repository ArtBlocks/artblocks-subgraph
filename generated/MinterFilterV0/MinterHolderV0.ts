// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AllowHoldersOfProject extends ethereum.Event {
  get params(): AllowHoldersOfProject__Params {
    return new AllowHoldersOfProject__Params(this);
  }
}

export class AllowHoldersOfProject__Params {
  _event: AllowHoldersOfProject;

  constructor(event: AllowHoldersOfProject) {
    this._event = event;
  }

  get _projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _ownedNftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _ownedNftProjectId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AllowlistedNftAddress extends ethereum.Event {
  get params(): AllowlistedNftAddress__Params {
    return new AllowlistedNftAddress__Params(this);
  }
}

export class AllowlistedNftAddress__Params {
  _event: AllowlistedNftAddress;

  constructor(event: AllowlistedNftAddress) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PricePerTokenInWeiUpdated extends ethereum.Event {
  get params(): PricePerTokenInWeiUpdated__Params {
    return new PricePerTokenInWeiUpdated__Params(this);
  }
}

export class PricePerTokenInWeiUpdated__Params {
  _event: PricePerTokenInWeiUpdated;

  constructor(event: PricePerTokenInWeiUpdated) {
    this._event = event;
  }

  get _projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _pricePerTokenInWei(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProjectCurrencyInfoUpdated extends ethereum.Event {
  get params(): ProjectCurrencyInfoUpdated__Params {
    return new ProjectCurrencyInfoUpdated__Params(this);
  }
}

export class ProjectCurrencyInfoUpdated__Params {
  _event: ProjectCurrencyInfoUpdated;

  constructor(event: ProjectCurrencyInfoUpdated) {
    this._event = event;
  }

  get _projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _currencyAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _currencySymbol(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class PurchaseToDisabledUpdated extends ethereum.Event {
  get params(): PurchaseToDisabledUpdated__Params {
    return new PurchaseToDisabledUpdated__Params(this);
  }
}

export class PurchaseToDisabledUpdated__Params {
  _event: PurchaseToDisabledUpdated;

  constructor(event: PurchaseToDisabledUpdated) {
    this._event = event;
  }

  get _projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _purchaseToDisabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class RemovedHoldersOfProject extends ethereum.Event {
  get params(): RemovedHoldersOfProject__Params {
    return new RemovedHoldersOfProject__Params(this);
  }
}

export class RemovedHoldersOfProject__Params {
  _event: RemovedHoldersOfProject;

  constructor(event: RemovedHoldersOfProject) {
    this._event = event;
  }

  get _projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _ownedNftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _ownedNftProjectId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RemovedNftAddress extends ethereum.Event {
  get params(): RemovedNftAddress__Params {
    return new RemovedNftAddress__Params(this);
  }
}

export class RemovedNftAddress__Params {
  _event: RemovedNftAddress;

  constructor(event: RemovedNftAddress) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MinterHolderV0__getPriceInfoResult {
  value0: boolean;
  value1: BigInt;
  value2: string;
  value3: Address;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: string,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class MinterHolderV0 extends ethereum.SmartContract {
  static bind(address: Address): MinterHolderV0 {
    return new MinterHolderV0("MinterHolderV0", address);
  }

  allowedProjectHolders(
    param0: BigInt,
    param1: Address,
    param2: BigInt
  ): boolean {
    let result = super.call(
      "allowedProjectHolders",
      "allowedProjectHolders(uint256,address,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_allowedProjectHolders(
    param0: BigInt,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowedProjectHolders",
      "allowedProjectHolders(uint256,address,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  genArt721CoreAddress(): Address {
    let result = super.call(
      "genArt721CoreAddress",
      "genArt721CoreAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_genArt721CoreAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "genArt721CoreAddress",
      "genArt721CoreAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllowedNftAddressAt(_index: BigInt): Address {
    let result = super.call(
      "getAllowedNftAddressAt",
      "getAllowedNftAddressAt(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toAddress();
  }

  try_getAllowedNftAddressAt(_index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAllowedNftAddressAt",
      "getAllowedNftAddressAt(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNumAllowedNftAddresses(): BigInt {
    let result = super.call(
      "getNumAllowedNftAddresses",
      "getNumAllowedNftAddresses():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumAllowedNftAddresses(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumAllowedNftAddresses",
      "getNumAllowedNftAddresses():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceInfo(_projectId: BigInt): MinterHolderV0__getPriceInfoResult {
    let result = super.call(
      "getPriceInfo",
      "getPriceInfo(uint256):(bool,uint256,string,address)",
      [ethereum.Value.fromUnsignedBigInt(_projectId)]
    );

    return new MinterHolderV0__getPriceInfoResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toAddress()
    );
  }

  try_getPriceInfo(
    _projectId: BigInt
  ): ethereum.CallResult<MinterHolderV0__getPriceInfoResult> {
    let result = super.tryCall(
      "getPriceInfo",
      "getPriceInfo(uint256):(bool,uint256,string,address)",
      [ethereum.Value.fromUnsignedBigInt(_projectId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MinterHolderV0__getPriceInfoResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toAddress()
      )
    );
  }

  isAllowlistedNFT(
    _projectId: BigInt,
    _ownedNftAddress: Address,
    _ownedNftTokenId: BigInt
  ): boolean {
    let result = super.call(
      "isAllowlistedNFT",
      "isAllowlistedNFT(uint256,address,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_projectId),
        ethereum.Value.fromAddress(_ownedNftAddress),
        ethereum.Value.fromUnsignedBigInt(_ownedNftTokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isAllowlistedNFT(
    _projectId: BigInt,
    _ownedNftAddress: Address,
    _ownedNftTokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAllowlistedNFT",
      "isAllowlistedNFT(uint256,address,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_projectId),
        ethereum.Value.fromAddress(_ownedNftAddress),
        ethereum.Value.fromUnsignedBigInt(_ownedNftTokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minterFilterAddress(): Address {
    let result = super.call(
      "minterFilterAddress",
      "minterFilterAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_minterFilterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "minterFilterAddress",
      "minterFilterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minterType(): string {
    let result = super.call("minterType", "minterType():(string)", []);

    return result[0].toString();
  }

  try_minterType(): ethereum.CallResult<string> {
    let result = super.tryCall("minterType", "minterType():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  projectMaxHasBeenInvoked(param0: BigInt): boolean {
    let result = super.call(
      "projectMaxHasBeenInvoked",
      "projectMaxHasBeenInvoked(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_projectMaxHasBeenInvoked(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "projectMaxHasBeenInvoked",
      "projectMaxHasBeenInvoked(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  projectMaxInvocations(param0: BigInt): BigInt {
    let result = super.call(
      "projectMaxInvocations",
      "projectMaxInvocations(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_projectMaxInvocations(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "projectMaxInvocations",
      "projectMaxInvocations(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _genArt721Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _minterFilter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllowHoldersOfProjectCall extends ethereum.Call {
  get inputs(): AllowHoldersOfProjectCall__Inputs {
    return new AllowHoldersOfProjectCall__Inputs(this);
  }

  get outputs(): AllowHoldersOfProjectCall__Outputs {
    return new AllowHoldersOfProjectCall__Outputs(this);
  }
}

export class AllowHoldersOfProjectCall__Inputs {
  _call: AllowHoldersOfProjectCall;

  constructor(call: AllowHoldersOfProjectCall) {
    this._call = call;
  }

  get _projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ownedNftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ownedNftProjectId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AllowHoldersOfProjectCall__Outputs {
  _call: AllowHoldersOfProjectCall;

  constructor(call: AllowHoldersOfProjectCall) {
    this._call = call;
  }
}

export class AllowlistNftAddressCall extends ethereum.Call {
  get inputs(): AllowlistNftAddressCall__Inputs {
    return new AllowlistNftAddressCall__Inputs(this);
  }

  get outputs(): AllowlistNftAddressCall__Outputs {
    return new AllowlistNftAddressCall__Outputs(this);
  }
}

export class AllowlistNftAddressCall__Inputs {
  _call: AllowlistNftAddressCall;

  constructor(call: AllowlistNftAddressCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AllowlistNftAddressCall__Outputs {
  _call: AllowlistNftAddressCall;

  constructor(call: AllowlistNftAddressCall) {
    this._call = call;
  }
}

export class PurchaseCall extends ethereum.Call {
  get inputs(): PurchaseCall__Inputs {
    return new PurchaseCall__Inputs(this);
  }

  get outputs(): PurchaseCall__Outputs {
    return new PurchaseCall__Outputs(this);
  }
}

export class PurchaseCall__Inputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get _projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ownedNftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ownedNftTokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PurchaseCall__Outputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Purchase1Call extends ethereum.Call {
  get inputs(): Purchase1Call__Inputs {
    return new Purchase1Call__Inputs(this);
  }

  get outputs(): Purchase1Call__Outputs {
    return new Purchase1Call__Outputs(this);
  }
}

export class Purchase1Call__Inputs {
  _call: Purchase1Call;

  constructor(call: Purchase1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Purchase1Call__Outputs {
  _call: Purchase1Call;

  constructor(call: Purchase1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PurchaseToCall extends ethereum.Call {
  get inputs(): PurchaseToCall__Inputs {
    return new PurchaseToCall__Inputs(this);
  }

  get outputs(): PurchaseToCall__Outputs {
    return new PurchaseToCall__Outputs(this);
  }
}

export class PurchaseToCall__Inputs {
  _call: PurchaseToCall;

  constructor(call: PurchaseToCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PurchaseToCall__Outputs {
  _call: PurchaseToCall;

  constructor(call: PurchaseToCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PurchaseTo1Call extends ethereum.Call {
  get inputs(): PurchaseTo1Call__Inputs {
    return new PurchaseTo1Call__Inputs(this);
  }

  get outputs(): PurchaseTo1Call__Outputs {
    return new PurchaseTo1Call__Outputs(this);
  }
}

export class PurchaseTo1Call__Inputs {
  _call: PurchaseTo1Call;

  constructor(call: PurchaseTo1Call) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _projectId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _ownedNftAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _ownedNftTokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class PurchaseTo1Call__Outputs {
  _call: PurchaseTo1Call;

  constructor(call: PurchaseTo1Call) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveHoldersOfProjectCall extends ethereum.Call {
  get inputs(): RemoveHoldersOfProjectCall__Inputs {
    return new RemoveHoldersOfProjectCall__Inputs(this);
  }

  get outputs(): RemoveHoldersOfProjectCall__Outputs {
    return new RemoveHoldersOfProjectCall__Outputs(this);
  }
}

export class RemoveHoldersOfProjectCall__Inputs {
  _call: RemoveHoldersOfProjectCall;

  constructor(call: RemoveHoldersOfProjectCall) {
    this._call = call;
  }

  get _projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ownedNftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ownedNftProjectId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveHoldersOfProjectCall__Outputs {
  _call: RemoveHoldersOfProjectCall;

  constructor(call: RemoveHoldersOfProjectCall) {
    this._call = call;
  }
}

export class RemoveNftAddressCall extends ethereum.Call {
  get inputs(): RemoveNftAddressCall__Inputs {
    return new RemoveNftAddressCall__Inputs(this);
  }

  get outputs(): RemoveNftAddressCall__Outputs {
    return new RemoveNftAddressCall__Outputs(this);
  }
}

export class RemoveNftAddressCall__Inputs {
  _call: RemoveNftAddressCall;

  constructor(call: RemoveNftAddressCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveNftAddressCall__Outputs {
  _call: RemoveNftAddressCall;

  constructor(call: RemoveNftAddressCall) {
    this._call = call;
  }
}

export class SetProjectMaxInvocationsCall extends ethereum.Call {
  get inputs(): SetProjectMaxInvocationsCall__Inputs {
    return new SetProjectMaxInvocationsCall__Inputs(this);
  }

  get outputs(): SetProjectMaxInvocationsCall__Outputs {
    return new SetProjectMaxInvocationsCall__Outputs(this);
  }
}

export class SetProjectMaxInvocationsCall__Inputs {
  _call: SetProjectMaxInvocationsCall;

  constructor(call: SetProjectMaxInvocationsCall) {
    this._call = call;
  }

  get _projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProjectMaxInvocationsCall__Outputs {
  _call: SetProjectMaxInvocationsCall;

  constructor(call: SetProjectMaxInvocationsCall) {
    this._call = call;
  }
}

export class UpdatePricePerTokenInWeiCall extends ethereum.Call {
  get inputs(): UpdatePricePerTokenInWeiCall__Inputs {
    return new UpdatePricePerTokenInWeiCall__Inputs(this);
  }

  get outputs(): UpdatePricePerTokenInWeiCall__Outputs {
    return new UpdatePricePerTokenInWeiCall__Outputs(this);
  }
}

export class UpdatePricePerTokenInWeiCall__Inputs {
  _call: UpdatePricePerTokenInWeiCall;

  constructor(call: UpdatePricePerTokenInWeiCall) {
    this._call = call;
  }

  get _projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _pricePerTokenInWei(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdatePricePerTokenInWeiCall__Outputs {
  _call: UpdatePricePerTokenInWeiCall;

  constructor(call: UpdatePricePerTokenInWeiCall) {
    this._call = call;
  }
}
