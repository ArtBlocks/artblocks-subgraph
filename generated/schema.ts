// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Platform extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Platform entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Platform entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Platform", id.toString(), this);
  }

  static load(id: string): Platform | null {
    return store.get("Platform", id) as Platform | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get artblocksAddress(): Bytes {
    let value = this.get("artblocksAddress");
    return value.toBytes();
  }

  set artblocksAddress(value: Bytes) {
    this.set("artblocksAddress", Value.fromBytes(value));
  }

  get artblocksPercentage(): BigInt {
    let value = this.get("artblocksPercentage");
    return value.toBigInt();
  }

  set artblocksPercentage(value: BigInt) {
    this.set("artblocksPercentage", Value.fromBigInt(value));
  }

  get mintWhitelisted(): Array<Bytes> | null {
    let value = this.get("mintWhitelisted");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set mintWhitelisted(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("mintWhitelisted");
    } else {
      this.set("mintWhitelisted", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get randomizerContract(): Bytes | null {
    let value = this.get("randomizerContract");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set randomizerContract(value: Bytes | null) {
    if (value === null) {
      this.unset("randomizerContract");
    } else {
      this.set("randomizerContract", Value.fromBytes(value as Bytes));
    }
  }

  get whitelisted(): Array<Bytes> | null {
    let value = this.get("whitelisted");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set whitelisted(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("whitelisted");
    } else {
      this.set("whitelisted", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get nextProjectId(): BigInt {
    let value = this.get("nextProjectId");
    return value.toBigInt();
  }

  set nextProjectId(value: BigInt) {
    this.set("nextProjectId", Value.fromBigInt(value));
  }
}

export class Project extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Project entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Project entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Project", id.toString(), this);
  }

  static load(id: string): Project | null {
    return store.get("Project", id) as Project | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get additionalPayee(): Bytes | null {
    let value = this.get("additionalPayee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set additionalPayee(value: Bytes | null) {
    if (value === null) {
      this.unset("additionalPayee");
    } else {
      this.set("additionalPayee", Value.fromBytes(value as Bytes));
    }
  }

  get additionalPayeePercentage(): BigInt | null {
    let value = this.get("additionalPayeePercentage");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set additionalPayeePercentage(value: BigInt | null) {
    if (value === null) {
      this.unset("additionalPayeePercentage");
    } else {
      this.set("additionalPayeePercentage", Value.fromBigInt(value as BigInt));
    }
  }

  get artistAddress(): Bytes {
    let value = this.get("artistAddress");
    return value.toBytes();
  }

  set artistAddress(value: Bytes) {
    this.set("artistAddress", Value.fromBytes(value));
  }

  get artistName(): string | null {
    let value = this.get("artistName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set artistName(value: string | null) {
    if (value === null) {
      this.unset("artistName");
    } else {
      this.set("artistName", Value.fromString(value as string));
    }
  }

  get baseIpfsUri(): string | null {
    let value = this.get("baseIpfsUri");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set baseIpfsUri(value: string | null) {
    if (value === null) {
      this.unset("baseIpfsUri");
    } else {
      this.set("baseIpfsUri", Value.fromString(value as string));
    }
  }

  get baseUri(): string | null {
    let value = this.get("baseUri");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set baseUri(value: string | null) {
    if (value === null) {
      this.unset("baseUri");
    } else {
      this.set("baseUri", Value.fromString(value as string));
    }
  }

  get currencyAddress(): Bytes | null {
    let value = this.get("currencyAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set currencyAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("currencyAddress");
    } else {
      this.set("currencyAddress", Value.fromBytes(value as Bytes));
    }
  }

  get currencySymbol(): string | null {
    let value = this.get("currencySymbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currencySymbol(value: string | null) {
    if (value === null) {
      this.unset("currencySymbol");
    } else {
      this.set("currencySymbol", Value.fromString(value as string));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }

  get dynamic(): boolean {
    let value = this.get("dynamic");
    return value.toBoolean();
  }

  set dynamic(value: boolean) {
    this.set("dynamic", Value.fromBoolean(value));
  }

  get invocations(): BigInt {
    let value = this.get("invocations");
    return value.toBigInt();
  }

  set invocations(value: BigInt) {
    this.set("invocations", Value.fromBigInt(value));
  }

  get ipfsHash(): string | null {
    let value = this.get("ipfsHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ipfsHash(value: string | null) {
    if (value === null) {
      this.unset("ipfsHash");
    } else {
      this.set("ipfsHash", Value.fromString(value as string));
    }
  }

  get license(): string | null {
    let value = this.get("license");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set license(value: string | null) {
    if (value === null) {
      this.unset("license");
    } else {
      this.set("license", Value.fromString(value as string));
    }
  }

  get locked(): boolean {
    let value = this.get("locked");
    return value.toBoolean();
  }

  set locked(value: boolean) {
    this.set("locked", Value.fromBoolean(value));
  }

  get maxInvocations(): BigInt {
    let value = this.get("maxInvocations");
    return value.toBigInt();
  }

  set maxInvocations(value: BigInt) {
    this.set("maxInvocations", Value.fromBigInt(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get paused(): boolean {
    let value = this.get("paused");
    return value.toBoolean();
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }

  get pricePerTokenInWei(): BigInt {
    let value = this.get("pricePerTokenInWei");
    return value.toBigInt();
  }

  set pricePerTokenInWei(value: BigInt) {
    this.set("pricePerTokenInWei", Value.fromBigInt(value));
  }

  get royaltyPercentage(): BigInt | null {
    let value = this.get("royaltyPercentage");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set royaltyPercentage(value: BigInt | null) {
    if (value === null) {
      this.unset("royaltyPercentage");
    } else {
      this.set("royaltyPercentage", Value.fromBigInt(value as BigInt));
    }
  }

  get script(): string | null {
    let value = this.get("script");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set script(value: string | null) {
    if (value === null) {
      this.unset("script");
    } else {
      this.set("script", Value.fromString(value as string));
    }
  }

  get scriptCount(): BigInt {
    let value = this.get("scriptCount");
    return value.toBigInt();
  }

  set scriptCount(value: BigInt) {
    this.set("scriptCount", Value.fromBigInt(value));
  }

  get scriptJSON(): string | null {
    let value = this.get("scriptJSON");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set scriptJSON(value: string | null) {
    if (value === null) {
      this.unset("scriptJSON");
    } else {
      this.set("scriptJSON", Value.fromString(value as string));
    }
  }

  get useHashString(): boolean {
    let value = this.get("useHashString");
    return value.toBoolean();
  }

  set useHashString(value: boolean) {
    this.set("useHashString", Value.fromBoolean(value));
  }

  get useIpfs(): boolean {
    let value = this.get("useIpfs");
    return value.toBoolean();
  }

  set useIpfs(value: boolean) {
    this.set("useIpfs", Value.fromBoolean(value));
  }

  get website(): string | null {
    let value = this.get("website");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set website(value: string | null) {
    if (value === null) {
      this.unset("website");
    } else {
      this.set("website", Value.fromString(value as string));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get project(): string {
    let value = this.get("project");
    return value.toString();
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (value === null) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(value as string));
    }
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transfer", id.toString(), this);
  }

  static load(id: string): Transfer | null {
    return store.get("Transfer", id) as Transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get from(): Bytes | null {
    let value = this.get("from");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes | null) {
    if (value === null) {
      this.unset("from");
    } else {
      this.set("from", Value.fromBytes(value as Bytes));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
