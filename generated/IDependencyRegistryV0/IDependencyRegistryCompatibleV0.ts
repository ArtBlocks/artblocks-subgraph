// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class IDependencyRegistryCompatibleV0__projectScriptDetailsResult {
  value0: string;
  value1: string;
  value2: BigInt;

  constructor(value0: string, value1: string, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getScriptTypeAndVersion(): string {
    return this.value0;
  }

  getAspectRatio(): string {
    return this.value1;
  }

  getScriptCount(): BigInt {
    return this.value2;
  }
}

export class IDependencyRegistryCompatibleV0 extends ethereum.SmartContract {
  static bind(address: Address): IDependencyRegistryCompatibleV0 {
    return new IDependencyRegistryCompatibleV0(
      "IDependencyRegistryCompatibleV0",
      address
    );
  }

  artblocksDependencyRegistryAddress(): Address {
    let result = super.call(
      "artblocksDependencyRegistryAddress",
      "artblocksDependencyRegistryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_artblocksDependencyRegistryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "artblocksDependencyRegistryAddress",
      "artblocksDependencyRegistryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  projectScriptDetails(
    _projectId: BigInt
  ): IDependencyRegistryCompatibleV0__projectScriptDetailsResult {
    let result = super.call(
      "projectScriptDetails",
      "projectScriptDetails(uint256):(string,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_projectId)]
    );

    return new IDependencyRegistryCompatibleV0__projectScriptDetailsResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toBigInt()
    );
  }

  try_projectScriptDetails(
    _projectId: BigInt
  ): ethereum.CallResult<
    IDependencyRegistryCompatibleV0__projectScriptDetailsResult
  > {
    let result = super.tryCall(
      "projectScriptDetails",
      "projectScriptDetails(uint256):(string,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_projectId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IDependencyRegistryCompatibleV0__projectScriptDetailsResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toBigInt()
      )
    );
  }
}
